CREATE SCHEMA ordering_system;

CREATE TABLE ordering_system.administrators (
    administrator_name		VARCHAR(64) NOT NULL UNIQUE,
    administrator_password	VARCHAR(64) NOT NULL,
    PRIMARY KEY (administrator_name),
    CHECK (LENGTH(administrator_name) > 0),
    CHECK (LENGTH(administrator_password) > 0));

CREATE TABLE ordering_system.users (
    user_id				INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    email				VARCHAR(64) NOT NULL UNIQUE,
    user_password		VARCHAR(64) NOT NULL,
    user_name			VARCHAR(64) NOT NULL,
    user_avatar			MEDIUMBLOB,
    user_contact		VARCHAR(32) NOT NULL,
    available_balance	DOUBLE NOT NULL,
    frozen_balance		DOUBLE NOT NULL,
    user_status			VARCHAR(32) NOT NULL,
    PRIMARY KEY (user_id),
    CHECK (email LIKE '%@%'),
    CHECK (LENGTH(user_password) > 0),
    CHECK (LENGTH(user_name) > 0),
    CHECK (available_balance >= 0),
    CHECK (frozen_balance >= 0),
    CHECK (user_status IN ('normal', 'blocked')));

CREATE TABLE ordering_system.shops (
    shop_id					INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    user_id					INT UNSIGNED NOT NULL,
    shop_name				VARCHAR(64) NOT NULL,
    shop_avatar				MEDIUMBLOB,
    shop_info				VARCHAR(4096) NOT NULL,
    shop_delivery_fee		DOUBLE NOT NULL,
    shop_rate				DOUBLE NOT NULL,
    shop_rate_number		DOUBLE NOT NULL,
    shop_balance			DOUBLE NOT NULL,
    shop_contact			VARCHAR(32) NOT NULL,
    shop_location			VARCHAR(32) NOT NULL,
    shop_location_detail	VARCHAR(64) NOT NULL,
    shop_opening_time		TIME NOT NULL,
    shop_closing_time		TIME NOT NULL,
    shop_license_number		VARCHAR(32) NOT NULL,
    shop_status				VARCHAR(32) NOT NULL,
    PRIMARY KEY (shop_id),
    FOREIGN KEY (user_id) REFERENCES ordering_system.users (user_id),
    CHECK (LENGTH(shop_name) > 0),
    CHECK (shop_delivery_fee IN (0.0, 1.0, 2.0, 3.0, 4.0, 5.0)),
    CHECK (shop_rate >= 0),
    CHECK (shop_rate_number >= 0),
    CHECK (shop_balance >= 0),
    CHECK (LENGTH(shop_contact) > 0),
    CHECK (shop_location IN ('Student Center', 'Shaw College', 'Muse College',
        'Deligentia College', 'Harmonia College', 'Le Tian Building',
        'Zhi Ren Building', 'Zhi Xin Building', 'Research A', 'Research B',
        'Teaching A', 'Teaching B', 'Teaching C', 'Teaching D')),
    CHECK (shop_status IN ('open', 'closed', 'blocked', 'cancelled')));

CREATE TABLE ordering_system.products (
    product_id		INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    shop_id			INT UNSIGNED NOT NULL,
    product_name	VARCHAR(64) NOT NULL,
    product_avatar	MEDIUMBLOB,
    product_info	VARCHAR(4096) NOT NULL,
    product_price	DOUBLE NOT NULL,
    month_sell		INT UNSIGNED NOT NULL,
    PRIMARY KEY (product_id),
    FOREIGN KEY (shop_id) REFERENCES ordering_system.shops (shop_id),
    CHECK (LENGTH(product_name) > 0),
    CHECK (product_price >= 0));

CREATE TABLE ordering_system.orders (
    order_id		INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    shop_id			INT UNSIGNED NOT NULL,
    user_id			INT UNSIGNED NOT NULL,
    user_contact	VARCHAR(32) NOT NULL,
    user_location	VARCHAR(32) NOT NULL,
    delivery_fee	DOUBLE NOT NULL,
    create_time		TIME NOT NULL,
    order_status	VARCHAR(32) NOT NULL,
    PRIMARY KEY (order_id),
    FOREIGN KEY (shop_id) REFERENCES ordering_system.shops (shop_id),
    FOREIGN KEY (user_id) REFERENCES ordering_system.users (user_id),
    CHECK (LENGTH(user_contact) > 0),
    CHECK (user_location IN ('Student Center', 'Shaw College', 'Muse College',
        'Deligentia College', 'Harmonia College', 'Le Tian Building',
        'Zhi Ren Building', 'Zhi Xin Building', 'Cheng Dao Building',
        'Dao Yuan Building', 'Li Wen Building', 'Qi Xian Building',
        'Sports Hall', 'Research A', 'Research B', 'Teaching A', 'Teaching B',
        'Teaching C', 'Teaching D', 'Staff Residence 1', 'Staff Residence 2',
        'Staff Residence 3', 'Staff Residence 4', 'Administration Building')),
    CHECK (delivery_fee IN (0.0, 1.0, 2.0, 3.0, 4.0, 5.0)),
    CHECK (order_status IN ('submitted', 'approved', 'denied', 'delivering',
        'finished', 'cancelled')));

CREATE TABLE ordering_system.products_in_orders (
    product_id		INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    order_id		INT UNSIGNED NOT NULL,
    product_name	VARCHAR(64) NOT NULL,
    product_price	DOUBLE NOT NULL,
    quantity		DOUBLE NOT NULL,
    PRIMARY KEY (product_id),
    FOREIGN KEY (order_id) REFERENCES ordering_system.orders (order_id),
    CHECK (LENGTH(product_name) > 0),
    CHECK (product_price >= 0),
    CHECK (quantity > 0));

CREATE TABLE ordering_system.applications (
    application_id			INT UNSIGNED NOT NULL UNIQUE AUTO_INCREMENT,
    user_id					INT UNSIGNED NOT NULL,
    application_type		VARCHAR(32) NOT NULL,
    shop_name				VARCHAR(64) NOT NULL,
    shop_info				VARCHAR(4096) NOT NULL,
    shop_contact			VARCHAR(32) NOT NULL,
    shop_location			VARCHAR(32) NOT NULL,
    shop_location_detail	VARCHAR(64) NOT NULL,
    shop_opening_time		TIME NOT NULL,
    shop_closing_time		TIME NOT NULL,
    shop_license_number		VARCHAR(32) NOT NULL,
    application_status		VARCHAR(32) NOT NULL,
    PRIMARY KEY (application_id),
    FOREIGN KEY (user_id) REFERENCES ordering_system.users (user_id),
    CHECK (application_type IN ('open', 'close')),
    CHECK (LENGTH(shop_name) > 0),
    CHECK (LENGTH(shop_contact) > 0),
    CHECK (shop_location IN ('Student Center', 'Shaw College', 'Muse College',
        'Deligentia College', 'Harmonia College', 'Le Tian Building',
        'Zhi Ren Building', 'Zhi Xin Building', 'Research A', 'Research B',
        'Teaching A', 'Teaching B', 'Teaching C', 'Teaching D')),
    CHECK (application_status IN ('submitted', 'approved', 'denied')));

CREATE TABLE ordering_system.bookmarks (
    user_id		INT UNSIGNED NOT NULL,
    shop_id		INT UNSIGNED NOT NULL,
    PRIMARY KEY (user_id, shop_id),
    FOREIGN KEY (user_id) REFERENCES ordering_system.users (user_id),
    FOREIGN KEY (shop_id) REFERENCES ordering_system.shops (shop_id));
